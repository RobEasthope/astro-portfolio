---
// eslint-disable-next-line import/no-unresolved
import { getCollection, z } from "astro:content";
import { WorkSchemaProps } from "@/schemas/work.schema";
import type { Render } from "astro:content";
import { Box } from "@/components/ui/Box/Box";
import { Type } from "@/components/ui/Type/Type";
import { Prose } from "@/components/ui/Prose/Prose";
import { ExternalLink } from "@/components/ui/ExternalLink/ExternalLink";
import type { ImageMetadata } from "astro";
import StandardPage from "@/layouts/StandardPage.astro";
import { Diamond } from "@/components/decoration/Diamond/Diamond";
import { DiamondPageBreak } from "@/components/decoration/DiamondPageBreak/DiamondPageBreak";

export async function getStaticPaths() {
  const work = await getCollection("work");
  return work.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

interface Props {
  entry: {
    slug: string;
    data: z.infer<typeof WorkSchemaProps> & {
      thumbnailImage: ImageMetadata;
    };
    render(): Render[".mdx"];
  };
}
// Pick off main content from the entry
const { Content } = await Astro.props.entry.render();

// Pick off the frontmatter
const {
  title,
  description,
  agency,
  agencyUrl,
  client,
  clientUrl,
  projectUrlTitle,
  projectUrl,
  repoTitle,
  repoUrl,
  tools,
  writtenDate,
} = Astro.props.entry.data;
---

<StandardPage title={title} description={description}>
  <Box as="div" className="mx-auto py-2 md:py-4 lg:py-6">
    <Box
      as="div"
      className="mx-auto mb-1 flex max-w-prose flex-col justify-center"
    >
      {
        title && (
          <Type as="h1" className="mb-0.5 text-center text-2xl leading-none">
            {title}
          </Type>
        )
      }

      {
        description && (
          <Type as="p" className="mb-1 text-center">
            {description}
          </Type>
        )
      }

      {
        (client || agency) && (
          <Type
            as="p"
            className="mt-1 mb-2 flex items-center justify-center gap-0.25"
          >
            {client && <ExternalLink href={clientUrl}>{client}</ExternalLink>}
            {client && agency && <Type as="span">&</Type>}
            {agency && <ExternalLink href={agencyUrl}>{agency}</ExternalLink>}
          </Type>
        )
      }
    </Box>

    <DiamondPageBreak />

    <Prose as="div" className="mx-auto my-1">
      <Content />
    </Prose>

    <DiamondPageBreak />

    <Box
      as="div"
      className="mx-auto mt-2 flex max-w-prose flex-col gap-0.5 text-center"
    >
      {
        projectUrlTitle && (
          <Type as="p" className="my-1 text-center">
            <ExternalLink href={projectUrl}>{projectUrlTitle}</ExternalLink>
          </Type>
        )
      }

      {tools && <Type as="p">{tools}</Type>}

      {repoUrl && <ExternalLink href={repoUrl}>{repoTitle}</ExternalLink>}

      {writtenDate && <Type as="p">{writtenDate}</Type>}
    </Box>
  </Box>
</StandardPage>

---
// eslint-disable-next-line import/no-unresolved
import { getCollection, z } from "astro:content";
import Base from "@/layouts/Base.astro";
import { WorkSchemaZProps } from "@/schemas/work.schema";
import type { Render } from "astro:content";
import { Box } from "@/components/ui/Box/Box";
import { Type } from "@/components/ui/Type/Type";
import { Dot } from "@/components/decoration/Dot/Dot";
import { Prose } from "@/components/ui/Prose/Prose";
import { ExternalLink } from "@/components/ui/ExternalLink/ExternalLink";

export async function getStaticPaths() {
  const work = await getCollection("work");
  return work.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

interface Props {
  entry: {
    slug: string;
    data: z.infer<typeof WorkSchemaZProps>;
    render(): Render[".mdx"];
  };
}
// Pick off main content from the entry
const { Content } = await Astro.props.entry.render();

// Pick off the frontmatter
const {
  title,
  description,
  agency,
  agencyUrl,
  client,
  clientUrl,
  projectUrlTitle,
  projectUrl,
  repoTitle,
  repoUrl,
  tools,
  dates,
} = Astro.props.entry.data;
---

<Base title={title}>
  <h1>{title}</h1>
  <p>{description}</p>
  <p>Client: {client}</p>
  <Content />
  <p>{tools}</p>
  <p>{dates}</p>

  <Box as="div" className="px-1 py-2 md:px-2">
    <Box
      as="div"
      className="mb-1 flex flex-col justify-center gap-1 text-center"
    >
      <!-- <SanityImage
        src={thumbnailImage}
        alt={title}
        mode={containLogo ? "contain" : "responsive"}
        aspectRatio={containLogo ? 0 : 1}
        className="mx-auto h-4 w-4 rounded-full"
      /> -->

      <Type as="h1" className="text-2xl">
        {title}
      </Type>

      <Type as="p">{description}</Type>

      <Box as="section" className="flex justify-center gap-1">
        {
          client && (
            <Type as="p">
              <Box as="span">Client: </Box>
              <ExternalLink href={clientUrl}>{client}</ExternalLink>
            </Type>
          )
        }
        {
          agency && (
            <Type as="p">
              <Box as="span">Agency: </Box>
              <ExternalLink href={agencyUrl}>{agency}</ExternalLink>
            </Type>
          )
        }
      </Box>

      <Dot />
    </Box>

    <Prose as="div" className="mx-auto">
      <Content />
    </Prose>

    <Box as="div" className="flex flex-col gap-1 text-center">
      <Dot className="mt-1" />
      <ExternalLink href={projectUrl}>
        {projectUrlTitle || projectUrl}
      </ExternalLink>

      <Type as="p">{tools}</Type>

      <ExternalLink href={repoUrl}>
        {repoTitle}
      </ExternalLink>

      <Type as="p">{dates}</Type>
    </Box>
  </Box>
</Base>
